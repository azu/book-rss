{
    "version": "https://jsonfeed.org/version/1",
    "title": "JavaScript(en) on Google Book",
    "home_page_url": "https://azu.github.io/book-rss/JavaScript-en.json",
    "description": "JavaScript(en) on Google Book",
    "items": [
        {
            "content_html": "Get the definitive guide on Gatsby, the JavaScript framework for building blazing fast websites and applications. Used by Nike, Costa Coffee, and other companies worldwide, Gatsby is emerging as one of the key technologies in the Jamstack (JavaScript, APIs, and markup) ecosystem. With this comprehensive guide, you'll learn how to architect, build, and deploy Gatsby sites independently or with CMSs, commerce systems, and other data sources. Author Preston So begins by showing you how to set up a Gatsby site from scratch. From there, you창??ll learn ways to use Gatsby창??s declarative rendering and GraphQL API, build complex offline-enabled sites, and continuously deploy Gatsby sites on a variety of platforms, including Gatsby Cloud. Discover how Gatsby integrates with many data sources and plug-ins Set up, configure, and architect Gatsby sites using Gatsby's CLI, React, JSX, and GraphQL with high performance out of the box Build an independent Gatsby site based on Markdown and data- and content-driven Gatsby sites that integrate with CMSs and commerce platforms Deploy Gatsby sites with full CI/CD and test coverage on a variety of platforms, including Netlify, Vercel, and Gatsby Cloud<br><blockquote>Get the definitive guide on Gatsby, the JavaScript framework for building blazing fast websites and applications.</blockquote>",
            "url": "http://books.google.com/books?id=mDhCEAAAQBAJ&printsec=frontcover&dq=JavaScript&hl=&cd=2&source=gbs_api",
            "title": "Gatsby: The Definitive Guide",
            "summary": "Get the definitive guide on Gatsby, the JavaScript framework for building blazing fast websites and applications. Used by Nike, Costa Coffee, and other companies worldwide, Gatsby is emerging as one of the key technologies in the Jamstack (JavaScript, APIs, and markup) ecosystem. With this comprehensive guide, you'll learn how to architect, build, and deploy Gatsby sites independently or with CMSs, commerce systems, and other data sources. Author Preston So begins by showing you how to set up a Gatsby site from scratch. From there, you창??ll learn ways to use Gatsby창??s declarative rendering and GraphQL API, build complex offline-enabled sites, and continuously deploy Gatsby sites on a variety of platforms, including Gatsby Cloud. Discover how Gatsby integrates with many data sources and plug-ins Set up, configure, and architect Gatsby sites using Gatsby's CLI, React, JSX, and GraphQL with high performance out of the box Build an independent Gatsby site based on Markdown and data- and content-driven Gatsby sites that integrate with CMSs and commerce platforms Deploy Gatsby sites with full CI/CD and test coverage on a variety of platforms, including Netlify, Vercel, and Gatsby Cloud",
            "image": "http://books.google.com/books/content?id=mDhCEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2021-09-09T00:00:00.000Z"
        },
        {
            "content_html": "Discover blueprints that explore various components of Blazor, C#, and .NET to help you build web apps without learning JavaScript Key Features Explore complete, easy-to-follow web projects using Blazor Build projects such as a weather app, expense tracker, and Kanban board with real-world applications Understand and work with Blazor WebAssembly effectively without spending too much time focusing on the theory Book Description Blazor WebAssembly makes it possible to run C# code on the browser instead of having to use JavaScript, and does not rely on plugins or add-ons. The only technical requirement for using Blazor WebAssembly is a browser that supports WebAssembly, which, as of today, all modern browsers do. Blazor WebAssembly by Example is a project-based guide for learning how to build single-page web applications using the Blazor WebAssembly framework. This book emphasizes the practical over the theoretical by providing detailed step-by-step instructions for each project. You'll start by building simple standalone web applications and progress to developing more advanced hosted web applications with SQL Server backends. Each project covers a different aspect of the Blazor WebAssembly ecosystem, such as Razor components, JavaScript interop, event handling, application state, and dependency injection. The book is designed in such a way that you can complete the projects in any order. By the end of this book, you will have experience building a wide variety of single-page web applications with .NET, Blazor WebAssembly, and C#. What you will learn Discover the power of the C# language for both server-side and client-side web development Use the Blazor WebAssembly App project template to build your first Blazor WebAssembly application Use templated components and the Razor class library to build and share a modal dialog box Understand how to use JavaScript with Blazor WebAssembly Build a progressive web app (PWA) to enable native app-like performance and speed Understand dependency injection (DI) in .NET to build a shopping cart app Get to grips with .NET Web APIs by building a task manager app Who this book is for This book is for .NET web developers who are tired of constantly learning new JavaScript frameworks and wish to write web applications using Blazor WebAssembly, leveraging the power of .NET and C#. The book assumes beginner-level knowledge of the C# language, .NET framework, Microsoft Visual Studio, and web development concepts.<br><blockquote>By the end of this book, you will have experience building a wide variety of single-page web applications with .NET, Blazor WebAssembly, and C#. What you will learn Discover the power of the C# language for both server-side and client-side ...</blockquote>",
            "url": "http://books.google.com/books?id=Ly0zEAAAQBAJ&printsec=frontcover&dq=JavaScript&hl=&cd=4&source=gbs_api",
            "title": "Blazor WebAssembly by Example",
            "summary": "Discover blueprints that explore various components of Blazor, C#, and .NET to help you build web apps without learning JavaScript Key Features Explore complete, easy-to-follow web projects using Blazor Build projects such as a weather app, expense tracker, and Kanban board with real-world applications Understand and work with Blazor WebAssembly effectively without spending too much time focusing on the theory Book Description Blazor WebAssembly makes it possible to run C# code on the browser instead of having to use JavaScript, and does not rely on plugins or add-ons. The only technical requirement for using Blazor WebAssembly is a browser that supports WebAssembly, which, as of today, all modern browsers do. Blazor WebAssembly by Example is a project-based guide for learning how to build single-page web applications using the Blazor WebAssembly framework. This book emphasizes the practical over the theoretical by providing detailed step-by-step instructions for each project. You'll start by building simple standalone web applications and progress to developing more advanced hosted web applications with SQL Server backends. Each project covers a different aspect of the Blazor WebAssembly ecosystem, such as Razor components, JavaScript interop, event handling, application state, and dependency injection. The book is designed in such a way that you can complete the projects in any order. By the end of this book, you will have experience building a wide variety of single-page web applications with .NET, Blazor WebAssembly, and C#. What you will learn Discover the power of the C# language for both server-side and client-side web development Use the Blazor WebAssembly App project template to build your first Blazor WebAssembly application Use templated components and the Razor class library to build and share a modal dialog box Understand how to use JavaScript with Blazor WebAssembly Build a progressive web app (PWA) to enable native app-like performance and speed Understand dependency injection (DI) in .NET to build a shopping cart app Get to grips with .NET Web APIs by building a task manager app Who this book is for This book is for .NET web developers who are tired of constantly learning new JavaScript frameworks and wish to write web applications using Blazor WebAssembly, leveraging the power of .NET and C#. The book assumes beginner-level knowledge of the C# language, .NET framework, Microsoft Visual Studio, and web development concepts.",
            "image": "http://books.google.com/books/content?id=Ly0zEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2021-07-09T00:00:00.000Z"
        },
        {
            "content_html": "Gain the knowledge you need to navigate your way confidently through the ever-expanding landscape of modern JavaScript technologies. With over one hundred Node.js frameworks available and the number rising every month, it is becoming increasingly difficult to avoid JavaScript fatigue and keep abreast of the developments that are most useful and relevant to your own projects. In such a saturated environment, the knowledge of exactly which tools will best fit your goals is invaluable. This book will guide you through the quagmire by clearly and comprehensively outlining the most practically useful Node frameworks, libraries and tools, and how they might be employed in your own projects. You will learn about JavaScript frameworks such as Polymer, Webix, Aurelia, Svelte, Meteor, and many, many more. This book will empower you to cut through the noise and learn how to achieve your career goals with the right tools meant especially for you. What Will You Learn: The what, why and how behind a variety of JavaScript Node frameworks, including Polymer, Aurelia, Svelte, and more. How to choose the right Node framework for different types of project How to ensure server-side optimization is done correctly, even if you are not a server admin Guide to JS tools such as Gulp, Grunt and npm Who Is This Book For: Web developers of all levels of ability; particularly relevant for front-end developers, server-side coders, and developers interested in learning JavaScript.<br><blockquote>This book will guide you through the quagmire by clearly and comprehensively outlining the most practically useful Node frameworks, libraries and tools, and how they might be employed in your own projects.</blockquote>",
            "url": "http://books.google.com/books?id=UX6dzgEACAAJ&dq=JavaScript&hl=&cd=6&source=gbs_api",
            "title": "Getting the Most Out of Node.Js Frameworks",
            "summary": "Gain the knowledge you need to navigate your way confidently through the ever-expanding landscape of modern JavaScript technologies. With over one hundred Node.js frameworks available and the number rising every month, it is becoming increasingly difficult to avoid JavaScript fatigue and keep abreast of the developments that are most useful and relevant to your own projects. In such a saturated environment, the knowledge of exactly which tools will best fit your goals is invaluable. This book will guide you through the quagmire by clearly and comprehensively outlining the most practically useful Node frameworks, libraries and tools, and how they might be employed in your own projects. You will learn about JavaScript frameworks such as Polymer, Webix, Aurelia, Svelte, Meteor, and many, many more. This book will empower you to cut through the noise and learn how to achieve your career goals with the right tools meant especially for you. What Will You Learn: The what, why and how behind a variety of JavaScript Node frameworks, including Polymer, Aurelia, Svelte, and more. How to choose the right Node framework for different types of project How to ensure server-side optimization is done correctly, even if you are not a server admin Guide to JS tools such as Gulp, Grunt and npm Who Is This Book For: Web developers of all levels of ability; particularly relevant for front-end developers, server-side coders, and developers interested in learning JavaScript.",
            "date_modified": "2022-03-21T00:00:00.000Z"
        },
        {
            "content_html": "Improve the user experience for your Rails app with rich, engaging client-side interactions. Learn to use the Rails 6 tools and simplify the complex JavaScript ecosystem. It's easier than ever to build user interactions with the Webpacker gem and Stimulus. You can add great front-end flair without much extra complication. Add React to build an even more extensive set of client-side features. Structure your code for different levels of client-side needs with these powerful options. Add to your toolkit today! It's hard to have a Rails application without integrating some client-side logic. But client-side coding tools, and the Rails tools for integrating with them, all change continuously. Rails 6 simplifies client-side integration with the Webpacker gem. It's the default tool for building client-side assets for use by web browsers. Learn how to use Rails 6 and Webpacker to build rich front-end logic into your Rails applications. The job is even easier with Stimulus, a library that brings Rails conventions to JavaScript tools. Add in some React, a popular framework that automatically updates the browser when your data changes. Learn the basics of webpack, Webpacker, and TypeScript, and add pizazz to your application. Structure your web application to best manage your state. Learn how to interact with data on the server while still keeping the user experience interactive. Use the type system in TypeScript to expand on JavaScript and help prevent error conditions. Debug and test your front-end application with tools specific to each framework. There are a lot of ways to do client-side coding, and Rails is here to help. What You Need: This book requires Ruby on Rails 6.0+, React 16.8.0+. Other dependencies will be added by Rails.<br><blockquote>Debug and test your front-end application with tools specific to each framework. There are a lot of ways to do client-side coding, and Rails is here to help. What You Need: This book requires Ruby on Rails 6.0+, React 16.8.0+.</blockquote>",
            "url": "http://books.google.com/books?id=mYFGEAAAQBAJ&printsec=frontcover&dq=JavaScript&hl=&cd=7&source=gbs_api",
            "title": "Modern Front-End Development for Rails",
            "summary": "Improve the user experience for your Rails app with rich, engaging client-side interactions. Learn to use the Rails 6 tools and simplify the complex JavaScript ecosystem. It's easier than ever to build user interactions with the Webpacker gem and Stimulus. You can add great front-end flair without much extra complication. Add React to build an even more extensive set of client-side features. Structure your code for different levels of client-side needs with these powerful options. Add to your toolkit today! It's hard to have a Rails application without integrating some client-side logic. But client-side coding tools, and the Rails tools for integrating with them, all change continuously. Rails 6 simplifies client-side integration with the Webpacker gem. It's the default tool for building client-side assets for use by web browsers. Learn how to use Rails 6 and Webpacker to build rich front-end logic into your Rails applications. The job is even easier with Stimulus, a library that brings Rails conventions to JavaScript tools. Add in some React, a popular framework that automatically updates the browser when your data changes. Learn the basics of webpack, Webpacker, and TypeScript, and add pizazz to your application. Structure your web application to best manage your state. Learn how to interact with data on the server while still keeping the user experience interactive. Use the type system in TypeScript to expand on JavaScript and help prevent error conditions. Debug and test your front-end application with tools specific to each framework. There are a lot of ways to do client-side coding, and Rails is here to help. What You Need: This book requires Ruby on Rails 6.0+, React 16.8.0+. Other dependencies will be added by Rails.",
            "image": "http://books.google.com/books/content?id=mYFGEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2021-06-29T00:00:00.000Z"
        },
        {
            "content_html": "The book is written in a cookbook style. Each recipe focuses on a concept in the WebAssembly world. Part 1 focuses on the basics of WebAssembly, WebAssembly Text Format, onboarding and using various tools like WABT, Binaryen. Chapter 1 gives a brief introduction to LLVM. What it is and how to use it. Chapter 2 introduces you into the emscripten world. Emscripten is a toolchain that helps to convert C/C++ into WebAssembly module. We will see how to install and manage the emscripten toolchain. Create our first WebAssembly module and run it on the browser and Node environment. Chapter 3 explores the WebAssembly module, how the module is made and what are the different sections. We will also explore the WebAssembly Text Format and how to write WebAssembly Text Format and convert it to WebAssembly binary. Chapter 4 explores how to install and use WebAssembly Binary Toolkit (WABT). Chapter 5 explores various section inside the WebAssembly binary and what are its purpose. Chapter 6 explores how to install and use Binaryen. Part 2 focuses on converting Rust to WebAssembly for fast, reliable code to run on the JavaScript Engine. Find out various ways of sharing data between Rust and WebAssembly. Explore how to use various tools that Rust and WebAssembly ecosystem provides. Chapter 7 starts with Rust and various ways to convert Rust into WebAssembly module and ends with wasm_bindgen. Chapter 8 focuses on how wasm bindgen along with crates like js-sys, web-sys helps to share entities from the WebAssembly world to JavaScript world. Chapter 9 explores wasm-pack and how it makes it easy to build Rust and WebAssembly application. Chapter 10 explores some Rust and WebAssembly examples. Chapter 11 briefly introduces WebAssembly System Interface (WASI) and various ways to run WASI.<br><blockquote>The book is written in a cookbook style.</blockquote>",
            "url": "http://books.google.com/books?id=IG0MEAAAQBAJ&pg=PP1&dq=JavaScript&hl=&cd=10&source=gbs_api",
            "title": "\\0asm 01 - Rust and WebAssembly",
            "summary": "The book is written in a cookbook style. Each recipe focuses on a concept in the WebAssembly world. Part 1 focuses on the basics of WebAssembly, WebAssembly Text Format, onboarding and using various tools like WABT, Binaryen. Chapter 1 gives a brief introduction to LLVM. What it is and how to use it. Chapter 2 introduces you into the emscripten world. Emscripten is a toolchain that helps to convert C/C++ into WebAssembly module. We will see how to install and manage the emscripten toolchain. Create our first WebAssembly module and run it on the browser and Node environment. Chapter 3 explores the WebAssembly module, how the module is made and what are the different sections. We will also explore the WebAssembly Text Format and how to write WebAssembly Text Format and convert it to WebAssembly binary. Chapter 4 explores how to install and use WebAssembly Binary Toolkit (WABT). Chapter 5 explores various section inside the WebAssembly binary and what are its purpose. Chapter 6 explores how to install and use Binaryen. Part 2 focuses on converting Rust to WebAssembly for fast, reliable code to run on the JavaScript Engine. Find out various ways of sharing data between Rust and WebAssembly. Explore how to use various tools that Rust and WebAssembly ecosystem provides. Chapter 7 starts with Rust and various ways to convert Rust into WebAssembly module and ends with wasm_bindgen. Chapter 8 focuses on how wasm bindgen along with crates like js-sys, web-sys helps to share entities from the WebAssembly world to JavaScript world. Chapter 9 explores wasm-pack and how it makes it easy to build Rust and WebAssembly application. Chapter 10 explores some Rust and WebAssembly examples. Chapter 11 briefly introduces WebAssembly System Interface (WASI) and various ways to run WASI.",
            "image": "http://books.google.com/books/content?id=IG0MEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2020-12-03T00:00:00.000Z"
        }
    ]
}