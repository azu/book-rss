{
    "version": "https://jsonfeed.org/version/1",
    "title": "JavaScript(en) on Google Book",
    "home_page_url": "https://azu.github.io/book-rss/JavaScript-en.json",
    "description": "JavaScript(en) on Google Book",
    "items": [
        {
            "content_html": "JavaScript Crash Course is a fast-paced, thorough introduction to programming in JavaScript that will have you writing your own software and web applications in no time. Like the bestselling Python Crash Course, this hands-on guide is a must-have for anyone who wants to learn how to code from the ground up, this time using the popular JavaScript programming language. JavaScript is the programming language of the internet, the secret sauce that makes websites dynamic, responsive, and all-around awesome. JavaScript Crash Course will quickly teach total beginners how to code in this popular, easy-to-learn language. This light-hearted, fast-paced introduction teaches you programming essentials through fun examples, hands-on exercises, and projects like building a Pong-style game. Discover all the important aspects of the language without delving into expert-level nitty-gritty details or confusing jargon. You will quickly develop an understanding of key coding concepts including strings, functions, arrays, and loops, and then move on to more advanced topics, such as building web-page interactivity by manipulating the DOM, and drawing graphics with Canvas. Along the way, you’ll have fun using JavaScript to make games, apps, and even create music.<br><blockquote>Like Python Crash Course, this hands-on guide is a must-have for anyone who wants to learn how to code from the ground up—this time using the popular JavaScript programming language.</blockquote>",
            "url": "http://books.google.com/books?id=qLpHEAAAQBAJ&dq=JavaScript&hl=&cd=1&source=gbs_api",
            "title": "JavaScript Crash Course",
            "summary": "JavaScript Crash Course is a fast-paced, thorough introduction to programming in JavaScript that will have you writing your own software and web applications in no time. Like the bestselling Python Crash Course, this hands-on guide is a must-have for anyone who wants to learn how to code from the ground up, this time using the popular JavaScript programming language. JavaScript is the programming language of the internet, the secret sauce that makes websites dynamic, responsive, and all-around awesome. JavaScript Crash Course will quickly teach total beginners how to code in this popular, easy-to-learn language. This light-hearted, fast-paced introduction teaches you programming essentials through fun examples, hands-on exercises, and projects like building a Pong-style game. Discover all the important aspects of the language without delving into expert-level nitty-gritty details or confusing jargon. You will quickly develop an understanding of key coding concepts including strings, functions, arrays, and loops, and then move on to more advanced topics, such as building web-page interactivity by manipulating the DOM, and drawing graphics with Canvas. Along the way, you’ll have fun using JavaScript to make games, apps, and even create music.",
            "image": "http://books.google.com/books/content?id=qLpHEAAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api",
            "date_modified": "2023-08-29T00:00:00.000Z"
        },
        {
            "content_html": "The Art of Unit Testing, Third Edition takes you below the surface and understand how unit testing can transform the way you deliver and maintain software. The Art of Unit Testing, Third Edition guides you step by step from your first simple unit tests to building complete test sets that are maintainable, readable, and trustworthy. Now with examples using JavaScript and Node, this expanded third edition teaches you to write unit tests for async and observable code, as well as methods of faking functions, modules and refactorings. You’ll get to grips with complex subjects such as mocks and stubs, explore how to handle tricky legacy codebases, and save yourself time with tests that function for both frontend and backend applications. The Art of Unit Testing, Third Edition is an essential guide for any unit tester who wants to feel confident writing code that’s easier to create, maintain, and adapt. Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.<br><blockquote>Now with examples using JavaScript and Node, this expanded third edition teaches you to write unit tests for async and observable code, as well as methods of faking functions, modules and refactorings.</blockquote>",
            "url": "http://books.google.com/books?id=kUAtzwEACAAJ&dq=JavaScript&hl=&cd=2&source=gbs_api",
            "title": "The Art of Unit Testing, Third Edition",
            "summary": "The Art of Unit Testing, Third Edition takes you below the surface and understand how unit testing can transform the way you deliver and maintain software. The Art of Unit Testing, Third Edition guides you step by step from your first simple unit tests to building complete test sets that are maintainable, readable, and trustworthy. Now with examples using JavaScript and Node, this expanded third edition teaches you to write unit tests for async and observable code, as well as methods of faking functions, modules and refactorings. You’ll get to grips with complex subjects such as mocks and stubs, explore how to handle tricky legacy codebases, and save yourself time with tests that function for both frontend and backend applications. The Art of Unit Testing, Third Edition is an essential guide for any unit tester who wants to feel confident writing code that’s easier to create, maintain, and adapt. Purchase of the print book includes a free eBook in PDF, Kindle, and ePub formats from Manning Publications.",
            "image": "http://books.google.com/books/content?id=kUAtzwEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api",
            "date_modified": "2022-12-27T00:00:00.000Z"
        },
        {
            "content_html": "Delve into the world of web development with Vue.js, Node.js, and MongoDB by exploring essential JavaScript concepts on the client side and the server side Key FeaturesGet up and running with JavaScript, the most popular web development language in the worldCut through the complexity and focus on the simple aspects of web developmentBuild a simple web application using Vue.js, Node.js, and MongoDBBook Description JavaScript, the most widely used programming language in the world, has numerous libraries and modules and a dizzying array of need-to-know topics. Picking a starting point can be difficult. Enter JavaScript from Frontend to Backend. This concise, practical guide will get you up to speed in next to no time. This book begins with the basics of variables and objects in JavaScript and then moves quickly on to building components on the client-side with Vue.js and a simple list management application. After that, the focus shifts to the server-side and Node.js, where you'll examine the MVC model and explore the Express module. Once you've got to grips with the server-side and the client-side, the only thing that remains is the database. You'll discover MongoDB and the Mongoose module. In the final chapter of this fast-paced guide, you'll combine all these pieces to integrate a Vue.js application into a Node.js server, using Express to structure the server code and MongoDB to store the information. By the end of this book, you will have the skills and confidence to successfully implement JavaScript concepts in your own projects and begin your career as a JavaScript developer. What you will learnTrigger deferred processing with JavaScriptImplement Express and MongoDB with Node.jsBuild components with Vue.jsUnderstand how to create and use modules with Node.jsFamiliarize yourself with npmBuild a client-side application entirely with JavaScriptDive into full stack development with Vue.js, Node.js, and MongoDBWho this book is for This book is for JavaScript developers looking to strengthen their core JavaScript concepts and implement them in building full stack apps. Prior knowledge of HTML and CSS is a must.<br><blockquote>Picking a starting point can be difficult. Enter JavaScript from Frontend to Backend. This concise, practical guide will get you up to speed in next to no time.</blockquote>",
            "url": "http://books.google.com/books?id=qOV5EAAAQBAJ&printsec=frontcover&dq=JavaScript&hl=&cd=3&source=gbs_api",
            "title": "JavaScript from Frontend to Backend",
            "summary": "Delve into the world of web development with Vue.js, Node.js, and MongoDB by exploring essential JavaScript concepts on the client side and the server side Key FeaturesGet up and running with JavaScript, the most popular web development language in the worldCut through the complexity and focus on the simple aspects of web developmentBuild a simple web application using Vue.js, Node.js, and MongoDBBook Description JavaScript, the most widely used programming language in the world, has numerous libraries and modules and a dizzying array of need-to-know topics. Picking a starting point can be difficult. Enter JavaScript from Frontend to Backend. This concise, practical guide will get you up to speed in next to no time. This book begins with the basics of variables and objects in JavaScript and then moves quickly on to building components on the client-side with Vue.js and a simple list management application. After that, the focus shifts to the server-side and Node.js, where you'll examine the MVC model and explore the Express module. Once you've got to grips with the server-side and the client-side, the only thing that remains is the database. You'll discover MongoDB and the Mongoose module. In the final chapter of this fast-paced guide, you'll combine all these pieces to integrate a Vue.js application into a Node.js server, using Express to structure the server code and MongoDB to store the information. By the end of this book, you will have the skills and confidence to successfully implement JavaScript concepts in your own projects and begin your career as a JavaScript developer. What you will learnTrigger deferred processing with JavaScriptImplement Express and MongoDB with Node.jsBuild components with Vue.jsUnderstand how to create and use modules with Node.jsFamiliarize yourself with npmBuild a client-side application entirely with JavaScriptDive into full stack development with Vue.js, Node.js, and MongoDBWho this book is for This book is for JavaScript developers looking to strengthen their core JavaScript concepts and implement them in building full stack apps. Prior knowledge of HTML and CSS is a must.",
            "image": "http://books.google.com/books/content?id=qOV5EAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2022-07-06T00:00:00.000Z"
        },
        {
            "content_html": "How do you turn raw, unprocessed, or malformed data into dynamic, interactive web visualizations? In this practical book, author Kyran Dale shows data scientists and analysts--as well as Python and JavaScript developers--how to create the ideal toolchain for the job. By providing engaging examples and stressing hard-earned best practices, this guide teaches you how to leverage the power of best-of-breed Python and JavaScript libraries. Python provides accessible, powerful, and mature libraries for scraping, cleaning, and processing data. And while JavaScript is the best language when it comes to programming web visualizations, its data processing abilities can't compare with Python's. Together, these two languages are a perfect complement for creating a modern web-visualization toolchain. This book gets you started. You'll learn how to: Obtain data you need programmatically, using scraping tools or web APIs: Requests, Scrapy, Beautiful Soup Clean and process data using Python's heavyweight data processing libraries within the NumPy ecosystem: Jupyter notebooks with pandas+Matplotlib+Seaborn Deliver the data to a browser with static files or by using Flask, the lightweight Python server, and a RESTful API Pick up enough web development skills (HTML, CSS, JS) to get your visualized data on the web Use the data you've mined and refined to create web charts and visualizations with Plotly, D3, Leaflet, and other libraries<br><blockquote>In this practical book, author Kyran Dale shows data scientists and analysts--as well as Python and JavaScript developers--how to create the ideal toolchain for the job.</blockquote>",
            "url": "http://books.google.com/books?id=vWcuzwEACAAJ&dq=JavaScript&hl=&cd=4&source=gbs_api",
            "title": "Data Visualization with Python and JavaScript",
            "summary": "How do you turn raw, unprocessed, or malformed data into dynamic, interactive web visualizations? In this practical book, author Kyran Dale shows data scientists and analysts--as well as Python and JavaScript developers--how to create the ideal toolchain for the job. By providing engaging examples and stressing hard-earned best practices, this guide teaches you how to leverage the power of best-of-breed Python and JavaScript libraries. Python provides accessible, powerful, and mature libraries for scraping, cleaning, and processing data. And while JavaScript is the best language when it comes to programming web visualizations, its data processing abilities can't compare with Python's. Together, these two languages are a perfect complement for creating a modern web-visualization toolchain. This book gets you started. You'll learn how to: Obtain data you need programmatically, using scraping tools or web APIs: Requests, Scrapy, Beautiful Soup Clean and process data using Python's heavyweight data processing libraries within the NumPy ecosystem: Jupyter notebooks with pandas+Matplotlib+Seaborn Deliver the data to a browser with static files or by using Flask, the lightweight Python server, and a RESTful API Pick up enough web development skills (HTML, CSS, JS) to get your visualized data on the web Use the data you've mined and refined to create web charts and visualizations with Plotly, D3, Leaflet, and other libraries",
            "image": "http://books.google.com/books/content?id=vWcuzwEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api",
            "date_modified": "2023-01-31T00:00:00.000Z"
        },
        {
            "content_html": "A new version of the classic and widely used text adapted for the JavaScript programming language. Since the publication of its first edition in 1984 and its second edition in 1996, Structure and Interpretation of Computer Programs (SICP) has influenced computer science curricula around the world. Widely adopted as a textbook, the book has its origins in a popular entry-level computer science course taught by Harold Abelson and Gerald Jay Sussman at MIT. SICP introduces the reader to central ideas of computation by establishing a series of mental models for computation. Earlier editions used the programming language Scheme in their program examples. This new version of the second edition has been adapted for JavaScript. The first three chapters of SICP cover programming concepts that are common to all modern high-level programming languages. Chapters four and five, which used Scheme to formulate language processors for Scheme, required significant revision. Chapter four offers new material, in particular an introduction to the notion of program parsing. The evaluator and compiler in chapter five introduce a subtle stack discipline to support return statements (a prominent feature of statement-oriented languages) without sacrificing tail recursion. The JavaScript programs included in the book run in any implementation of the language that complies with the ECMAScript 2020 specification, using the JavaScript package sicp provided by the MIT Press website.<br><blockquote>Widely adopted as a textbook, the book has its origins in a popular entry-level computer science course taught by Harold Abelson and Gerald Jay Sussman at MIT.</blockquote>",
            "url": "http://books.google.com/books?id=WSUuEAAAQBAJ&printsec=frontcover&dq=JavaScript&hl=&cd=5&source=gbs_api",
            "title": "Structure and Interpretation of Computer Programs",
            "summary": "A new version of the classic and widely used text adapted for the JavaScript programming language. Since the publication of its first edition in 1984 and its second edition in 1996, Structure and Interpretation of Computer Programs (SICP) has influenced computer science curricula around the world. Widely adopted as a textbook, the book has its origins in a popular entry-level computer science course taught by Harold Abelson and Gerald Jay Sussman at MIT. SICP introduces the reader to central ideas of computation by establishing a series of mental models for computation. Earlier editions used the programming language Scheme in their program examples. This new version of the second edition has been adapted for JavaScript. The first three chapters of SICP cover programming concepts that are common to all modern high-level programming languages. Chapters four and five, which used Scheme to formulate language processors for Scheme, required significant revision. Chapter four offers new material, in particular an introduction to the notion of program parsing. The evaluator and compiler in chapter five introduce a subtle stack discipline to support return statements (a prominent feature of statement-oriented languages) without sacrificing tail recursion. The JavaScript programs included in the book run in any implementation of the language that complies with the ECMAScript 2020 specification, using the JavaScript package sicp provided by the MIT Press website.",
            "image": "http://books.google.com/books/content?id=WSUuEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2022-05-03T00:00:00.000Z"
        },
        {
            "content_html": "A new version of the classic and widely used text adapted for the JavaScript programming language. Since the publication of its first edition in 1984 and its second edition in 1996, Structure and Interpretation of Computer Programs (SICP) has influenced computer science curricula around the world. Widely adopted as a textbook, the book has its origins in a popular entry-level computer science course taught by Harold Abelson and Gerald Jay Sussman at MIT. SICP introduces the reader to central ideas of computation by establishing a series of mental models for computation. Earlier editions used the programming language Scheme in their program examples. This new version of the second edition has been adapted for JavaScript. The first three chapters of SICP cover programming concepts that are common to all modern high-level programming languages. Chapters four and five, which used Scheme to formulate language processors for Scheme, required significant revision. Chapter four offers new material, in particular an introduction to the notion of program parsing. The evaluator and compiler in chapter five introduce a subtle stack discipline to support return statements (a prominent feature of statement-oriented languages) without sacrificing tail recursion. The JavaScript programs included in the book run in any implementation of the language that complies with the ECMAScript 2020 specification, using the JavaScript package sicp provided by the MIT Press website.<br><blockquote>Widely adopted as a textbook, the book has its origins in a popular entry-level computer science course taught by Harold Abelson and Gerald Jay Sussman at MIT.</blockquote>",
            "url": "http://books.google.com/books?id=4rtNEAAAQBAJ&pg=PP1&dq=JavaScript&hl=&cd=6&source=gbs_api",
            "title": "Structure and Interpretation of Computer Programs",
            "summary": "A new version of the classic and widely used text adapted for the JavaScript programming language. Since the publication of its first edition in 1984 and its second edition in 1996, Structure and Interpretation of Computer Programs (SICP) has influenced computer science curricula around the world. Widely adopted as a textbook, the book has its origins in a popular entry-level computer science course taught by Harold Abelson and Gerald Jay Sussman at MIT. SICP introduces the reader to central ideas of computation by establishing a series of mental models for computation. Earlier editions used the programming language Scheme in their program examples. This new version of the second edition has been adapted for JavaScript. The first three chapters of SICP cover programming concepts that are common to all modern high-level programming languages. Chapters four and five, which used Scheme to formulate language processors for Scheme, required significant revision. Chapter four offers new material, in particular an introduction to the notion of program parsing. The evaluator and compiler in chapter five introduce a subtle stack discipline to support return statements (a prominent feature of statement-oriented languages) without sacrificing tail recursion. The JavaScript programs included in the book run in any implementation of the language that complies with the ECMAScript 2020 specification, using the JavaScript package sicp provided by the MIT Press website.",
            "image": "http://books.google.com/books/content?id=4rtNEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2022-04-12T00:00:00.000Z"
        },
        {
            "content_html": "This book serves as a succinct guide on ReScript, a functional language for building web applications. Using examples of ReScript language features along with explanations of fundamental concepts in functional programming, this book will show web developers with a background in JavaScript how to effectively use ReScript to its full potential. In Introducing ReScript, you'll learn how to use features in ReScript that JavaScript lacks, such as type inference, null-safety, algebraic data types, pattern matching, and more. Along the way, you'll pick up functional programming concepts like immutability and higher-order functions. You'll also gain a sense of how ReScript works under the hood and how to leverage interoperability between ReScript and JavaScript. Whether you're a web developer interested in dabbling with functional programming or you just want to learn how to write safer and cleaner code for web applications, this book is a great way for you to get started with ReScript. What You Will Learn Use ReScript to write clean, safe, and elegant software Understand the features of ReScript that set it apart from JavaScript, such as type inference, null-safety, and algebraic data types Explore functional programming concepts like immutabhigher-orderr order functions, and pattern matching Use popular JavaScript libraries and frameworks in your ReScript code and integrate ReScript code into JavaScript codebases Who This Book Is For Web developers that want a strictly typed, safer alternative to JavaScript, as well as web developers interested in learning functional programming and leveraging the elegant and powerful functional features in ReScript.<br><blockquote>This book serves as a succinct guide on ReScript, a functional language for building web applications.</blockquote>",
            "url": "http://books.google.com/books?id=1ZRYzwEACAAJ&dq=JavaScript&hl=&cd=7&source=gbs_api",
            "title": "Introducing ReScript",
            "summary": "This book serves as a succinct guide on ReScript, a functional language for building web applications. Using examples of ReScript language features along with explanations of fundamental concepts in functional programming, this book will show web developers with a background in JavaScript how to effectively use ReScript to its full potential. In Introducing ReScript, you'll learn how to use features in ReScript that JavaScript lacks, such as type inference, null-safety, algebraic data types, pattern matching, and more. Along the way, you'll pick up functional programming concepts like immutability and higher-order functions. You'll also gain a sense of how ReScript works under the hood and how to leverage interoperability between ReScript and JavaScript. Whether you're a web developer interested in dabbling with functional programming or you just want to learn how to write safer and cleaner code for web applications, this book is a great way for you to get started with ReScript. What You Will Learn Use ReScript to write clean, safe, and elegant software Understand the features of ReScript that set it apart from JavaScript, such as type inference, null-safety, and algebraic data types Explore functional programming concepts like immutabhigher-orderr order functions, and pattern matching Use popular JavaScript libraries and frameworks in your ReScript code and integrate ReScript code into JavaScript codebases Who This Book Is For Web developers that want a strictly typed, safer alternative to JavaScript, as well as web developers interested in learning functional programming and leveraging the elegant and powerful functional features in ReScript.",
            "image": "http://books.google.com/books/content?id=1ZRYzwEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api",
            "date_modified": "2022-12-28T00:00:00.000Z"
        },
        {
            "content_html": "In this book, you will learn design patterns, performance and rendering patterns for building high-quality web applications using modern JavaScript and React. Patterns are time-tested templates for writing code. They can be really powerful, whether you're a seasoned developer or beginner, bringing a valuable level of resilience and flexibility to your codebase. Whether it's better user-experience, developer-experience or just smarter architecture, the patterns in “Learning Patterns” can be a valuable consideration for any modern web application.<br><blockquote>In this book, you will learn design patterns, performance and rendering patterns for building high-quality web applications using modern JavaScript and React.</blockquote>",
            "url": "http://books.google.com/books?id=BnJLEAAAQBAJ&pg=PP1&dq=JavaScript&hl=&cd=8&source=gbs_api",
            "title": "Learning Patterns",
            "summary": "In this book, you will learn design patterns, performance and rendering patterns for building high-quality web applications using modern JavaScript and React. Patterns are time-tested templates for writing code. They can be really powerful, whether you're a seasoned developer or beginner, bringing a valuable level of resilience and flexibility to your codebase. Whether it's better user-experience, developer-experience or just smarter architecture, the patterns in “Learning Patterns” can be a valuable consideration for any modern web application.",
            "image": "http://books.google.com/books/content?id=BnJLEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2021-10-31T00:00:00.000Z"
        },
        {
            "content_html": "\"The best way to learn design in any field is to study examples, and some of the best examples of software design come from the tools programmers use in their own work. Software Design by Example: A Tool-Based Introduction with JavaScript therefore build small versions of the things programmers use in order to demystify them and give some insights into how experienced programmers think. From a file backup system and a testing framework to a regular expression matcher, a browser layout engine, and a very small compiler, we explore common design patterns, show how making code easier to test also makes it easier to re-use, and help readers understand how debuggers, profilers, package managers, and version control systems work so that they can use them more effectively. This material can be used for self-paced study, in an undergraduate course on software design, or as the core of an intensive week-long workshop for working programmers. Each chapter has a set of exercises ranging in size and difficulty from half a dozen lines to a full day's work. Readers should be familiar with the basics of modern JavaScript, but the more advanced features of the language are explained and illustrated as they are introduced. All the written material in this project can be freely reused under the terms of the Creative Commons - Attribution license, while all of the software is made available under the terms of the Hippocratic License. All proceeds from sale of this book will go to support the Red Door Family Shelter in Toronto. Features Teaches software design by showing programmers how to build the tools they use every day. Each chapter includes exercises to help readers check and deepen their understanding. All the example code can be downloaded, re-used, and modified under an open license\"--<br><blockquote>All proceeds from sale of this book will go to support the Red Door Family Shelter in Toronto. Features Teaches software design by showing programmers how to build the tools they use every day.</blockquote>",
            "url": "http://books.google.com/books?id=_15gzwEACAAJ&dq=JavaScript&hl=&cd=9&source=gbs_api",
            "title": "Software Design by Example",
            "summary": "\"The best way to learn design in any field is to study examples, and some of the best examples of software design come from the tools programmers use in their own work. Software Design by Example: A Tool-Based Introduction with JavaScript therefore build small versions of the things programmers use in order to demystify them and give some insights into how experienced programmers think. From a file backup system and a testing framework to a regular expression matcher, a browser layout engine, and a very small compiler, we explore common design patterns, show how making code easier to test also makes it easier to re-use, and help readers understand how debuggers, profilers, package managers, and version control systems work so that they can use them more effectively. This material can be used for self-paced study, in an undergraduate course on software design, or as the core of an intensive week-long workshop for working programmers. Each chapter has a set of exercises ranging in size and difficulty from half a dozen lines to a full day's work. Readers should be familiar with the basics of modern JavaScript, but the more advanced features of the language are explained and illustrated as they are introduced. All the written material in this project can be freely reused under the terms of the Creative Commons - Attribution license, while all of the software is made available under the terms of the Hippocratic License. All proceeds from sale of this book will go to support the Red Door Family Shelter in Toronto. Features Teaches software design by showing programmers how to build the tools they use every day. Each chapter includes exercises to help readers check and deepen their understanding. All the example code can be downloaded, re-used, and modified under an open license\"--",
            "image": "http://books.google.com/books/content?id=_15gzwEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api",
            "date_modified": "2022-12-01T00:00:00.000Z"
        },
        {
            "content_html": "Little known to many, R works just as well with JavaScript—this book delves into the various ways both languages can work together. The ultimate aim of this work is to put the reader at ease with inviting JavaScript in their data science workflow. In that respect the book is not teaching one JavaScript but rather we show how little JavaScript can greatly support and enhance R code. Therefore, the focus is on integrating external JavaScript libraries and no prior knowledge of JavaScript is required. Key Features: ● Easy to pick up. ● An entry way to learning JavaScript for R. ● Covers topics not covered anywhere else. ● Easy to follow along.<br><blockquote>The ultimate aim of this work is to put the reader at ease with inviting JavaScript in their data science workflow.</blockquote>",
            "url": "http://books.google.com/books?id=ntUxEAAAQBAJ&pg=PP1&dq=JavaScript&hl=&cd=10&source=gbs_api",
            "title": "Javascript for R",
            "summary": "Little known to many, R works just as well with JavaScript—this book delves into the various ways both languages can work together. The ultimate aim of this work is to put the reader at ease with inviting JavaScript in their data science workflow. In that respect the book is not teaching one JavaScript but rather we show how little JavaScript can greatly support and enhance R code. Therefore, the focus is on integrating external JavaScript libraries and no prior knowledge of JavaScript is required. Key Features: ● Easy to pick up. ● An entry way to learning JavaScript for R. ● Covers topics not covered anywhere else. ● Easy to follow along.",
            "image": "http://books.google.com/books/content?id=ntUxEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2021-07-15T00:00:00.000Z"
        }
    ]
}