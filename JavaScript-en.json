{
    "version": "https://jsonfeed.org/version/1",
    "title": "JavaScript(en) on Google Book",
    "home_page_url": "https://azu.github.io/book-rss/JavaScript-en.json",
    "description": "JavaScript(en) on Google Book",
    "items": [
        {
            "content_html": "The days of the traditional request-response web application are long gone, but you don't have to wade through oceans of JavaScript to build the interactive applications today's users crave. The innovative Phoenix LiveView library empowers you to build applications that are fast and highly interactive, without sacrificing reliability. This definitive guide to LiveView isn't a reference manual. Learn to think in LiveView. Write your code layer by layer, the way the experts do. Explore techniques with experienced teachers to get the best possible performance. Instead of settling for traditional manuals and tutorials, get insights that can only be learned from experience. Start with the Elixir language techniques that effortlessly marry your client templates and server-side handlers. Design your systems with the right layers in the right places so that your code is easier to understand, change, and support. Explore features like multi-part uploads and learn how to comprehensively test your live views. Roll into advanced techniques to tie your code to other services through the powerful publish-subscribe interface. LiveView brings the most important programming techniques from the popular Elm and JavaScript React frameworks to Elixir. You'll experience firsthand how to harness that power by working side by side with some of the first LiveView users. You will write your programs to change data on the server, and you'll see how LiveView efficiently detects those changes and reflects them on the web page. Start from scratch, use built-in generators, and craft reusable components. Your single-purpose reducers will transform server data that your renderers can turn into efficient client-side diffs. Don't settle for knowing how things work. To get the most out of LiveView, you need to know why they work that way. Co-authored by one of the most prolific authors and teachers in all of Elixir, this book is your perfect guide to one of the most important new frameworks of our generation. What You Need: Programming Phoenix LiveView uses Phoenix version 1.5, and any Elixir version compatible with it. You will also want PostgreSQL and JavaScript Node.<br><blockquote>The innovative Phoenix LiveView library empowers you to build applications that are fast and highly interactive, without sacrificing reliability. This definitive guide to LiveView isn&#39;t a reference manual. Learn to think in LiveView.</blockquote>",
            "url": "http://books.google.com/books?id=JaBizgEACAAJ&dq=JavaScript&hl=&cd=1&source=gbs_api",
            "title": "Programming Phoenix LiveView",
            "summary": "The days of the traditional request-response web application are long gone, but you don't have to wade through oceans of JavaScript to build the interactive applications today's users crave. The innovative Phoenix LiveView library empowers you to build applications that are fast and highly interactive, without sacrificing reliability. This definitive guide to LiveView isn't a reference manual. Learn to think in LiveView. Write your code layer by layer, the way the experts do. Explore techniques with experienced teachers to get the best possible performance. Instead of settling for traditional manuals and tutorials, get insights that can only be learned from experience. Start with the Elixir language techniques that effortlessly marry your client templates and server-side handlers. Design your systems with the right layers in the right places so that your code is easier to understand, change, and support. Explore features like multi-part uploads and learn how to comprehensively test your live views. Roll into advanced techniques to tie your code to other services through the powerful publish-subscribe interface. LiveView brings the most important programming techniques from the popular Elm and JavaScript React frameworks to Elixir. You'll experience firsthand how to harness that power by working side by side with some of the first LiveView users. You will write your programs to change data on the server, and you'll see how LiveView efficiently detects those changes and reflects them on the web page. Start from scratch, use built-in generators, and craft reusable components. Your single-purpose reducers will transform server data that your renderers can turn into efficient client-side diffs. Don't settle for knowing how things work. To get the most out of LiveView, you need to know why they work that way. Co-authored by one of the most prolific authors and teachers in all of Elixir, this book is your perfect guide to one of the most important new frameworks of our generation. What You Need: Programming Phoenix LiveView uses Phoenix version 1.5, and any Elixir version compatible with it. You will also want PostgreSQL and JavaScript Node.",
            "image": "http://books.google.com/books/content?id=JaBizgEACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api",
            "date_modified": "2021-09-30T00:00:00.000Z"
        },
        {
            "content_html": "Improve the user experience for your Rails app with rich, engaging client-side interactions. Learn to use the Rails 6 tools and simplify the complex JavaScript ecosystem. It's easier than ever to build user interactions with the Webpacker gem and Stimulus. You can add great front-end flair without much extra complication. Add React to build an even more extensive set of client-side features. Structure your code for different levels of client-side needs with these powerful options. Add to your toolkit today! It's hard to have a Rails application without integrating some client-side logic. But client-side coding tools, and the Rails tools for integrating with them, all change continuously. Rails 6 simplifies client-side integration with the Webpacker gem. It's the default tool for building client-side assets for use by web browsers. Learn how to use Rails 6 and Webpacker to build rich front-end logic into your Rails applications. The job is even easier with Stimulus, a library that brings Rails conventions to JavaScript tools. Add in some React, a popular framework that automatically updates the browser when your data changes. Learn the basics of webpack, Webpacker, and TypeScript, and add pizazz to your application. Structure your web application to best manage your state. Learn how to interact with data on the server while still keeping the user experience interactive. Use the type system in TypeScript to expand on JavaScript and help prevent error conditions. Debug and test your front-end application with tools specific to each framework. There are a lot of ways to do client-side coding, and Rails is here to help. What You Need: This book requires Ruby on Rails 6.0+, React 16.8.0+. Other dependencies will be added by Rails.<br><blockquote>Debug and test your front-end application with tools specific to each framework. There are a lot of ways to do client-side coding, and Rails is here to help. What You Need: This book requires Ruby on Rails 6.0+, React 16.8.0+.</blockquote>",
            "url": "http://books.google.com/books?id=mYFGEAAAQBAJ&printsec=frontcover&dq=JavaScript&hl=&cd=6&source=gbs_api",
            "title": "Modern Front-End Development for Rails",
            "summary": "Improve the user experience for your Rails app with rich, engaging client-side interactions. Learn to use the Rails 6 tools and simplify the complex JavaScript ecosystem. It's easier than ever to build user interactions with the Webpacker gem and Stimulus. You can add great front-end flair without much extra complication. Add React to build an even more extensive set of client-side features. Structure your code for different levels of client-side needs with these powerful options. Add to your toolkit today! It's hard to have a Rails application without integrating some client-side logic. But client-side coding tools, and the Rails tools for integrating with them, all change continuously. Rails 6 simplifies client-side integration with the Webpacker gem. It's the default tool for building client-side assets for use by web browsers. Learn how to use Rails 6 and Webpacker to build rich front-end logic into your Rails applications. The job is even easier with Stimulus, a library that brings Rails conventions to JavaScript tools. Add in some React, a popular framework that automatically updates the browser when your data changes. Learn the basics of webpack, Webpacker, and TypeScript, and add pizazz to your application. Structure your web application to best manage your state. Learn how to interact with data on the server while still keeping the user experience interactive. Use the type system in TypeScript to expand on JavaScript and help prevent error conditions. Debug and test your front-end application with tools specific to each framework. There are a lot of ways to do client-side coding, and Rails is here to help. What You Need: This book requires Ruby on Rails 6.0+, React 16.8.0+. Other dependencies will be added by Rails.",
            "image": "http://books.google.com/books/content?id=mYFGEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2021-06-29T00:00:00.000Z"
        },
        {
            "content_html": "JavaScript is an important scripting language for almost every modern web application. It is simple for beginners but complex when you build a full-scale application. The book is extremely user-friendly. It assumes no programming experience and helps the students to learn the JavaScript in step by step manner with the help of illustrative examples. The first two units cover the fundamental concepts of JavaScript such as variables, operators, control structures, arrays, functions and strings. In the third unit, the concept of form and event handling is discussed. This feature of JavaScript help us to design the interactive web page with graphical user interface. In the next subsequent chapter, the book demonstrates how to create and manage cookies, how to create browser history, implementation of form validation with the help of regular expressions, creating rollover effects and creating and handling frames. At the end, the book illustrates creation of banner, management of status bar and creation of slideshows using JavaScript. This book serves the purpose of teaching JavaScript in the simplest and easiest manner.<br><blockquote>At the end, the book illustrates creation of banner, management of status bar and creation of slideshows using JavaScript. This book serves the purpose of teaching JavaScript in the simplest and easiest manner.</blockquote>",
            "url": "http://books.google.com/books?id=jOUbEAAAQBAJ&printsec=frontcover&dq=JavaScript&hl=&cd=10&source=gbs_api",
            "title": "Client Side Scripting",
            "summary": "JavaScript is an important scripting language for almost every modern web application. It is simple for beginners but complex when you build a full-scale application. The book is extremely user-friendly. It assumes no programming experience and helps the students to learn the JavaScript in step by step manner with the help of illustrative examples. The first two units cover the fundamental concepts of JavaScript such as variables, operators, control structures, arrays, functions and strings. In the third unit, the concept of form and event handling is discussed. This feature of JavaScript help us to design the interactive web page with graphical user interface. In the next subsequent chapter, the book demonstrates how to create and manage cookies, how to create browser history, implementation of form validation with the help of regular expressions, creating rollover effects and creating and handling frames. At the end, the book illustrates creation of banner, management of status bar and creation of slideshows using JavaScript. This book serves the purpose of teaching JavaScript in the simplest and easiest manner.",
            "image": "http://books.google.com/books/content?id=jOUbEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api",
            "date_modified": "2020-12-01T00:00:00.000Z"
        }
    ]
}